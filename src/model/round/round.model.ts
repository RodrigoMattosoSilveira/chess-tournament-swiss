/**
 * State
 * 		The tournament round games state be provided and it is initialized to `scheduled` at the time of the round
 * 		creation
 * 		The tournament round state cannot transition to `underway` unless the tournament state is `underway`
 * 		When state transitions to `underway` the tournament round started date is initialised to NOW
 * 		When state transitions to `completed` the tournament round ended date is initialised to NOW
 * Games
 * 		The tournament round games cannot be provided and it is initialized to `[]` at the time of the round creation
 * Number
 * 		The tournament round number cannot be provided when creating tournament round;
 * 		The tournament round number cannot be patched;
 *		 When creating a round, read all tournament rounds,
 * 			If there are no tournament rounds, then round number is 1
 * 			else
 * 			round number is equal to n + 1, where n is the highest tournament round number
 * Started
 * 		The tournament round started date is created when its state transitions from scheduled to started, and it cannot
 * 		be patched;
 * Ended
 * 		The tournament round ended date is created when its state transitions from underway to completed, and it cannot
 * 		be patched;
 */
export interface RoundDto {
	id: string;				// generated by the server
	tournament: string;		// required, must exist
	number?: number;			// round's order in time
	games?: Array<string>	// Ids of the round's games, []*
	state?:string;			// scheduled*, underway, complete
	started?: number		// milliseconds since epoch to date (date when transitioned to underway)
	ended?: number			// milliseconds since epoch to date (date when transitioned to complete)
}
